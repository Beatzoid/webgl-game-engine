// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"40Om1":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "4768f49e813a4495b1920e1aff77a11e"; // @flow
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets/*: {|[string]: boolean|} */ , acceptedAssets/*: {|[string]: boolean|} */ , assetsToAccept/*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    // $FlowFixMe
    ws.onmessage = function(event/*: {data: string, ...} */ ) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH
            );
            // Handle HMR Update
            var handled = false;
            assets.forEach((asset)=>{
                var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
                if (didAccept) handled = true;
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function(e) {
        console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] âœ¨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
        errorHTML += `\n      <div>\n        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>\n          ${stack}\n        </pre>\n        <div>\n          ${diagnostic.hints.map((hint)=>'<div>' + hint + '</div>'
        ).join('')}\n        </div>\n      </div>\n    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    link.getAttribute('href').split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle/*: ParcelRequire */ , asset/*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle/*: ParcelRequire */ , id/*: string */ , depsByBundle/*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle/*: ParcelRequire */ , id/*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"2jKye":[function(require,module,exports) {
var _engine = require("./core/engine");
const engine = new _engine.Engine();
// The main entry point for the app
window.onload = function() {
    engine.start();
};
window.onresize = function() {
    engine.resize();
};

},{"./core/engine":"32cMc"}],"32cMc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Engine", ()=>Engine
);
var _gl = require("./gl/gl");
var _glBuffer = require("./gl/glBuffer");
var _shader = require("./gl/shader");
class Engine {
    /**
     * Creates a new Engine
     */ constructor(){
    }
    /**
     * Start up the Engine
     */ start() {
        this._canvas = _gl.GLUtilities.initialize();
        _gl.gl.clearColor(0, 0, 0, 1);
        this.loadShaders();
        this._shader?.use();
        this.createBuffer();
        this.resize();
        this.loop();
    }
    /**
     * Resizes the canvas to fit the window
     */ resize() {
        if (this._canvas) {
            this._canvas.width = window.innerWidth;
            this._canvas.height = window.innerHeight;
            _gl.gl.viewport(0, 0, this._canvas.width, this._canvas.height);
        }
    }
    loop() {
        _gl.gl.clear(_gl.gl.COLOR_BUFFER_BIT);
        // Set uniforms
        const colorPosition = this._shader?.getUniformLocation("u_color");
        _gl.gl.uniform4f(colorPosition, 1, 0.5, 0, 1);
        this._buffer?.bind();
        this._buffer?.draw();
        requestAnimationFrame(this.loop.bind(this));
    }
    createBuffer() {
        this._buffer = new _glBuffer.GlBuffer(3);
        const positionAttribute = new _glBuffer.AttributeInfo();
        positionAttribute.location = this._shader?.getAttributeLocation("a_position");
        positionAttribute.offset = 0;
        positionAttribute.size = 3;
        this._buffer.addAttributeLocation(positionAttribute);
        // prettier-ignore
        const vertices = [
            //  x  y  z
            0,
            0,
            0,
            0,
            0.5,
            0,
            0.5,
            0.5,
            0
        ];
        this._buffer.pushBackData(vertices);
        this._buffer.upload();
        this._buffer.unbind();
    }
    loadShaders() {
        const vertexShaderSource = `\n        attribute vec3 a_position;\n\n        void main() {\n            gl_Position = vec4(a_position, 1.0);\n        }`;
        const fragmentShaderSource = `\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;
        this._shader = new _shader.Shader("basic", vertexShaderSource, fragmentShaderSource);
    }
}

},{"./gl/gl":"6OChf","./gl/glBuffer":"1xdLK","./gl/shader":"1oakB","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"6OChf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gl", ()=>gl
);
/**
 * Responsible for setting up a WebGL renderer
 */ parcelHelpers.export(exports, "GLUtilities", ()=>GLUtilities
);
let gl;
class GLUtilities {
    /**
     * Initializes WebGL, optionally using the canvas element id provided
     * @param elementId The Id of the canvas element
     */ static initialize(elementId) {
        let canvas;
        if (elementId) {
            canvas = document.getElementById(elementId);
            if (!canvas) throw new Error(`Cannot find a canvas element named ${elementId}`);
        } else {
            canvas = document.createElement("canvas");
            document.body.appendChild(canvas);
        }
        gl = canvas.getContext("webgl2");
        if (!gl) throw new Error("Unable to initialize WebGL");
        return canvas;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"367CR":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1xdLK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents the information needed for a GLBuffer attribute.
 */ parcelHelpers.export(exports, "AttributeInfo", ()=>AttributeInfo
);
/**
 * Represents a WebGL Buffer
 */ parcelHelpers.export(exports, "GlBuffer", ()=>GlBuffer
);
var _gl = require("./gl");
class AttributeInfo {
}
class GlBuffer {
    /**
     * Creates a new Gl Buffer
     * @param elementSize The size of each element in the buffer
     * @param dataType The data type of the buffer. Default: `gl.FLOAT`
     * @param targetBufferType The buffer target type. Can be either `gl.ARRAY_BUFFER` or `gl.ELEMENT_ARRAY_BUFFER`. Default: `gl.ARRAY_BUFFER`
     * @param mode The drawing mode of this buffer. (i.e. `gl.TRIANGLES` or `gl.LINES`). Defaukt: `gl.TRIANGLES`
     */ constructor(elementSize, dataType = _gl.gl.FLOAT, targetBufferType = _gl.gl.ARRAY_BUFFER, mode = _gl.gl.TRIANGLES){
        this._hasAttributeLocation = false;
        this._data = [];
        this._attributes = [];
        this._elementSize = elementSize;
        this._dataType = dataType;
        this._targetBufferType = targetBufferType;
        this._mode = mode;
        // Determine byte size
        switch(this._dataType){
            case _gl.gl.FLOAT:
            case _gl.gl.INT:
            case _gl.gl.UNSIGNED_INT:
                this._typeSize = 4;
                break;
            case _gl.gl.SHORT:
            case _gl.gl.UNSIGNED_SHORT:
                this._typeSize = 2;
                break;
            case _gl.gl.BYTE:
            case _gl.gl.UNSIGNED_BYTE:
                this._typeSize = 1;
                break;
            default:
                throw new Error(`Unrecognized data type "${dataType}"`);
        }
        this._stride = this._elementSize * this._typeSize;
        this._buffer = _gl.gl.createBuffer();
    }
    /**
     * Destroy the Buffer
     */ destroy() {
        _gl.gl.deleteBuffer(this._buffer);
    }
    /**
     * Bind the Buffer
     * @param noramlized Indicates if the data should be normalized. Default: `false`
     */ bind(noramlized = false) {
        _gl.gl.bindBuffer(this._targetBufferType, this._buffer);
        if (this._hasAttributeLocation) for (let it of this._attributes){
            _gl.gl.vertexAttribPointer(it.location, it.size, this._dataType, noramlized, this._stride, it.offset * this._typeSize);
            _gl.gl.enableVertexAttribArray(it.location);
        }
    }
    /**
     * Unbind the Buffer
     */ unbind() {
        for (let it of this._attributes)_gl.gl.disableVertexAttribArray(it.location);
        _gl.gl.bindBuffer(_gl.gl.ARRAY_BUFFER, this._buffer);
    }
    /**
     * Adds an attribute with the provided information to the Buffer
     * @param info The information to add
     */ addAttributeLocation(info) {
        this._hasAttributeLocation = true;
        this._attributes.push(info);
    }
    /**
     * Add data to the Buffer
     * @param data The data to add
     */ pushBackData(data) {
        for (const d of data)this._data.push(d);
    }
    /**
     * Upload the Buffer data to the GPU
     */ upload() {
        _gl.gl.bindBuffer(_gl.gl.ARRAY_BUFFER, this._buffer);
        let bufferData;
        switch(this._dataType){
            case _gl.gl.FLOAT:
                bufferData = new Float32Array(this._data);
                break;
            case _gl.gl.INT:
                bufferData = new Int32Array(this._data);
                break;
            case _gl.gl.UNSIGNED_INT:
                bufferData = new Uint32Array(this._data);
                break;
            case _gl.gl.SHORT:
                bufferData = new Int16Array(this._data);
                break;
            case _gl.gl.UNSIGNED_SHORT:
                bufferData = new Uint16Array(this._data);
                break;
            case _gl.gl.BYTE:
                bufferData = new Int8Array(this._data);
                break;
            case _gl.gl.UNSIGNED_BYTE:
                bufferData = new Uint8Array(this._data);
                break;
        }
        _gl.gl.bufferData(this._targetBufferType, bufferData, _gl.gl.STATIC_DRAW);
    }
    /**
     * Draw the Buffer
     */ draw() {
        if (this._targetBufferType === _gl.gl.ARRAY_BUFFER) _gl.gl.drawArrays(this._mode, 0, this._data.length / this._elementSize);
        else if (this._targetBufferType === _gl.gl.ELEMENT_ARRAY_BUFFER) _gl.gl.drawElements(this._mode, this._data.length, this._dataType, 0);
    }
}

},{"./gl":"6OChf","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}],"1oakB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Represents a WebGL Shader
 */ parcelHelpers.export(exports, "Shader", ()=>Shader
);
var _gl = require("./gl");
class Shader {
    /**
     * Creates a new shader
     * @param name The name of the shader
     * @param vertexSource The source of the vertex shader
     * @param fragmentSource The source of the fragment shader
     */ constructor(name1, vertexSource, fragmentSource){
        this._attributes = {
        };
        this._uniforms = {
        };
        this._name = name1;
        const vertexShader1 = this.loadShader(vertexSource, _gl.gl.VERTEX_SHADER);
        const fragmentShader1 = this.loadShader(fragmentSource, _gl.gl.FRAGMENT_SHADER);
        this.createProgram(vertexShader1, fragmentShader1);
        this.detectAtttributes();
        this.detectUniforms();
    }
    /**
     * The name of the shader
     */ get name() {
        return this._name;
    }
    /**
     * Gets the location of an attribute with the specified name
     * @param name The name of the attribute
     */ getAttributeLocation(name) {
        if (this._attributes[name] === undefined) throw new Error(`Unable to find an attribute named "${name}" in shader "${this._name}"`);
        return this._attributes[name];
    }
    /**
     * Gets the location of an uniform with the specified name
     * @param name The name of the uniform
     */ getUniformLocation(name) {
        if (this._uniforms[name] === undefined) throw new Error(`Unable to find an uniform named "${name}" in shader "${this._name}"`);
        return this._uniforms[name];
    }
    /**
     * Use this shader
     */ use() {
        _gl.gl.useProgram(this._program);
    }
    loadShader(source, shaderType) {
        let shader = _gl.gl.createShader(shaderType);
        _gl.gl.shaderSource(shader, source);
        _gl.gl.compileShader(shader);
        const error = _gl.gl.getShaderInfoLog(shader);
        if (error) throw new Error(`Error compiling shader "${this._name}": ${error}`);
        return shader;
    }
    createProgram(vertexShader, fragmentShader) {
        this._program = _gl.gl.createProgram();
        _gl.gl.attachShader(this._program, vertexShader);
        _gl.gl.attachShader(this._program, fragmentShader);
        _gl.gl.linkProgram(this._program);
        const error = _gl.gl.getProgramInfoLog(this._program);
        if (error) throw new Error(`Error linking shader "${this._name}": ${error}`);
    }
    detectAtttributes() {
        const attributeCount = _gl.gl.getProgramParameter(this._program, _gl.gl.ACTIVE_ATTRIBUTES);
        for(let i = 0; i < attributeCount; i++){
            const info = _gl.gl.getActiveAttrib(this._program, i);
            if (!info) break;
            this._attributes[info.name] = _gl.gl.getAttribLocation(this._program, info.name);
        }
    }
    detectUniforms() {
        const uniformCount = _gl.gl.getProgramParameter(this._program, _gl.gl.ACTIVE_UNIFORMS);
        for(let i = 0; i < uniformCount; i++){
            const info = _gl.gl.getActiveUniform(this._program, i);
            if (!info) break;
            this._uniforms[info.name] = _gl.gl.getUniformLocation(this._program, info.name);
        }
    }
}

},{"./gl":"6OChf","@parcel/transformer-js/src/esmodule-helpers.js":"367CR"}]},["40Om1","2jKye"], "2jKye", "parcelRequire387f")

//# sourceMappingURL=index.HASH_REF_4768f49e813a4495b1920e1aff77a11e.js.map
