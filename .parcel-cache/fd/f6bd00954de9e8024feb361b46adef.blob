import   "b03cf2e3746c65c96d39b379869c6fdb:./gl";
class $b03cf2e3746c65c96d39b379869c6fdb$export$d1752e654c4e05d4 {
}
class $b03cf2e3746c65c96d39b379869c6fdb$export$27a9faed5bcbf55a {
    /**
     * Creates a new Gl Buffer
     * @param elementSize The size of each element in the buffer
     * @param dataType The data type of the buffer. Default: `gl.FLOAT`
     * @param targetBufferType The buffer target type. Can be either `gl.ARRAY_BUFFER` or `gl.ELEMENT_ARRAY_BUFFER`. Default: `gl.ARRAY_BUFFER`
     * @param mode The drawing mode of this buffer. (i.e. `gl.TRIANGLES` or `gl.LINES`). Defaukt: `gl.TRIANGLES`
     */ constructor(elementSize, dataType = $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.FLOAT, targetBufferType = $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ARRAY_BUFFER, mode = $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.TRIANGLES){
        this._hasAttributeLocation = false;
        this._data = [];
        this._attributes = [];
        this._elementSize = elementSize;
        this._dataType = dataType;
        this._targetBufferType = targetBufferType;
        this._mode = mode;
        // Determine byte size
        switch(this._dataType){
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.FLOAT:
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.INT:
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_INT:
                this._typeSize = 4;
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.SHORT:
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_SHORT:
                this._typeSize = 2;
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.BYTE:
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_BYTE:
                this._typeSize = 1;
                break;
            default:
                throw new Error(`Unrecognized data type "${dataType}"`);
        }
        this._stride = this._elementSize * this._typeSize;
        this._buffer = $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.createBuffer();
    }
    /**
     * Destroy the Buffer
     */ destroy() {
        $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.deleteBuffer(this._buffer);
    }
    /**
     * Bind the Buffer
     * @param noramlized Indicates if the data should be normalized. Default: `false`
     */ bind(noramlized = false) {
        $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.bindBuffer(this._targetBufferType, this._buffer);
        if (this._hasAttributeLocation) for (let it of this._attributes){
            $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.vertexAttribPointer(it.location, it.size, this._dataType, noramlized, this._stride, it.offset * this._typeSize);
            $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.enableVertexAttribArray(it.location);
        }
    }
    /**
     * Unbind the Buffer
     */ unbind() {
        for (let it of this._attributes)$b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.disableVertexAttribArray(it.location);
        $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.bindBuffer($b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ARRAY_BUFFER, this._buffer);
    }
    /**
     * Adds an attribute with the provided information to the Buffer
     * @param info The information to add
     */ addAttributeLocation(info) {
        this._hasAttributeLocation = true;
        this._attributes.push(info);
    }
    /**
     * Add data to the Buffer
     * @param data The data to add
     */ pushBackData(data) {
        for (const d of data)this._data.push(d);
    }
    /**
     * Upload the Buffer data to the GPU
     */ upload() {
        $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.bindBuffer($b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ARRAY_BUFFER, this._buffer);
        let bufferData;
        switch(this._dataType){
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.FLOAT:
                bufferData = new Float32Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.INT:
                bufferData = new Int32Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_INT:
                bufferData = new Uint32Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.SHORT:
                bufferData = new Int16Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_SHORT:
                bufferData = new Uint16Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.BYTE:
                bufferData = new Int8Array(this._data);
                break;
            case $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.UNSIGNED_BYTE:
                bufferData = new Uint8Array(this._data);
                break;
        }
        $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.bufferData(this._targetBufferType, bufferData, $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.STATIC_DRAW);
    }
    /**
     * Draw the Buffer
     */ draw() {
        if (this._targetBufferType === $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ARRAY_BUFFER) $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.drawArrays(this._mode, 0, this._data.length / this._elementSize);
        else if (this._targetBufferType === $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ELEMENT_ARRAY_BUFFER) $b03cf2e3746c65c96d39b379869c6fdb$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.drawElements(this._mode, this._data.length, this._dataType, 0);
    }
}
