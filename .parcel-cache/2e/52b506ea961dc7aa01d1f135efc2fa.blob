import   "616fbb2495ee5df786519deced079714:./gl";
class $616fbb2495ee5df786519deced079714$export$2b6a748984e845f3 {
    /**
     * Creates a new shader
     * @param name The name of the shader
     * @param vertexSource The source of the vertex shader
     * @param fragmentSource The source of the fragment shader
     */ constructor(name1, vertexSource, fragmentSource){
        this._attributes = {
        };
        this._uniforms = {
        };
        this._name = name1;
        const vertexShader1 = this.loadShader(vertexSource, $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.VERTEX_SHADER);
        const fragmentShader1 = this.loadShader(fragmentSource, $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.FRAGMENT_SHADER);
        this.createProgram(vertexShader1, fragmentShader1);
        this.detectAtttributes();
        this.detectUniforms();
    }
    /**
     * The name of the shader
     */ get name() {
        return this._name;
    }
    /**
     * Gets the location of an attribute with the specified name
     * @param name The name of the attribute
     */ getAttributeLocation(name) {
        if (this._attributes[name] === undefined) throw new Error(`Unable to find an attribute named "${name}" in shader "${this._name}"`);
        return this._attributes[name];
    }
    /**
     * Gets the location of an uniform with the specified name
     * @param name The name of the uniform
     */ getUniformLocation(name) {
        if (this._uniforms[name] === undefined) throw new Error(`Unable to find an uniform named "${name}" in shader "${this._name}"`);
        return this._uniforms[name];
    }
    /**
     * Use this shader
     */ use() {
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.useProgram(this._program);
    }
    loadShader(source, shaderType) {
        let shader = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.createShader(shaderType);
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.shaderSource(shader, source);
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.compileShader(shader);
        const error = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getShaderInfoLog(shader);
        if (error) throw new Error(`Error compiling shader "${this._name}": ${error}`);
        return shader;
    }
    createProgram(vertexShader, fragmentShader) {
        this._program = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.createProgram();
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.attachShader(this._program, vertexShader);
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.attachShader(this._program, fragmentShader);
        $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.linkProgram(this._program);
        const error = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getProgramInfoLog(this._program);
        if (error) throw new Error(`Error linking shader "${this._name}": ${error}`);
    }
    detectAtttributes() {
        const attributeCount = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getProgramParameter(this._program, $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ACTIVE_ATTRIBUTES);
        for(let i = 0; i < attributeCount; i++){
            const info = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getActiveAttrib(this._program, i);
            if (!info) break;
            this._attributes[info.name] = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getAttribLocation(this._program, info.name);
        }
    }
    detectUniforms() {
        const uniformCount = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getProgramParameter(this._program, $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.ACTIVE_UNIFORMS);
        for(let i = 0; i < uniformCount; i++){
            const info = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getActiveUniform(this._program, i);
            if (!info) break;
            this._uniforms[info.name] = $616fbb2495ee5df786519deced079714$import$2e03d5c1cfe1ee7f$9474f141dfdb0e16.getUniformLocation(this._program, info.name);
        }
    }
}
