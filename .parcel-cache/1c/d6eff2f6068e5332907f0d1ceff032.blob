!function(){let t;class e{}class i{constructor(e,i=t.FLOAT,r=t.ARRAY_BUFFER,a=t.TRIANGLES){switch(this._hasAttributeLocation=!1,this._data=[],this._attributes=[],this._elementSize=e,this._dataType=i,this._targetBufferType=r,this._mode=a,this._dataType){case t.FLOAT:case t.INT:case t.UNSIGNED_INT:this._typeSize=4;break;case t.SHORT:case t.UNSIGNED_SHORT:this._typeSize=2;break;case t.BYTE:case t.UNSIGNED_BYTE:this._typeSize=1;break;default:throw new Error(`Unrecognized data type "${i}"`)}this._stride=this._elementSize*this._typeSize,this._buffer=t.createBuffer()}destroy(){t.deleteBuffer(this._buffer)}bind(e=!1){if(t.bindBuffer(this._targetBufferType,this._buffer),this._hasAttributeLocation)for(let i of this._attributes)t.vertexAttribPointer(i.location,i.size,this._dataType,e,this._stride,i.offset*this._typeSize),t.enableVertexAttribArray(i.location)}unbind(){for(let e of this._attributes)t.disableVertexAttribArray(e.location);t.bindBuffer(t.ARRAY_BUFFER,this._buffer)}addAttributeLocation(t){this._hasAttributeLocation=!0,this._attributes.push(t)}pushBackData(t){for(const e of t)this._data.push(e)}upload(){let e;switch(t.bindBuffer(t.ARRAY_BUFFER,this._buffer),this._dataType){case t.FLOAT:e=new Float32Array(this._data);break;case t.INT:e=new Int32Array(this._data);break;case t.UNSIGNED_INT:e=new Uint32Array(this._data);break;case t.SHORT:e=new Int16Array(this._data);break;case t.UNSIGNED_SHORT:e=new Uint16Array(this._data);break;case t.BYTE:e=new Int8Array(this._data);break;case t.UNSIGNED_BYTE:e=new Uint8Array(this._data)}t.bufferData(this._targetBufferType,e,t.STATIC_DRAW)}draw(){this._targetBufferType===t.ARRAY_BUFFER?t.drawArrays(this._mode,0,this._data.length/this._elementSize):this._targetBufferType===t.ELEMENT_ARRAY_BUFFER&&t.drawElements(this._mode,this._data.length,this._dataType,0)}}class r{constructor(e,i,r){this._attributes={},this._uniforms={},this._name=e;const a=this.loadShader(i,t.VERTEX_SHADER),s=this.loadShader(r,t.FRAGMENT_SHADER);this.createProgram(a,s),this.detectAtttributes(),this.detectUniforms()}get name(){return this._name}getAttributeLocation(t){if(void 0===this._attributes[t])throw new Error(`Unable to find an attribute named "${t}" in shader "${this._name}"`);return this._attributes[t]}getUniformLocation(t){if(void 0===this._uniforms[t])throw new Error(`Unable to find an uniform named "${t}" in shader "${this._name}"`);return this._uniforms[t]}use(){t.useProgram(this._program)}loadShader(e,i){let r=t.createShader(i);t.shaderSource(r,e),t.compileShader(r);const a=t.getShaderInfoLog(r);if(a)throw new Error(`Error compiling shader "${this._name}": ${a}`);return r}createProgram(e,i){this._program=t.createProgram(),t.attachShader(this._program,e),t.attachShader(this._program,i),t.linkProgram(this._program);const r=t.getProgramInfoLog(this._program);if(r)throw new Error(`Error linking shader "${this._name}": ${r}`)}detectAtttributes(){const e=t.getProgramParameter(this._program,t.ACTIVE_ATTRIBUTES);for(let i=0;i<e;i++){const e=t.getActiveAttrib(this._program,i);if(!e)break;this._attributes[e.name]=t.getAttribLocation(this._program,e.name)}}detectUniforms(){const e=t.getProgramParameter(this._program,t.ACTIVE_UNIFORMS);for(let i=0;i<e;i++){const e=t.getActiveUniform(this._program,i);if(!e)break;this._uniforms[e.name]=t.getUniformLocation(this._program,e.name)}}}const a=new class{constructor(){}start(){this._canvas=class{static initialize(e){let i;if(e){if(i=document.getElementById(e),!i)throw new Error(`Cannot find a canvas element named ${e}`)}else i=document.createElement("canvas"),document.body.appendChild(i);if(t=i.getContext("webgl2"),!t)throw new Error("Unable to initialize WebGL");return i}}.initialize(),t.clearColor(0,0,0,1),this.loadShaders(),this._shader?.use(),this.createBuffer(),this.resize(),this.loop()}resize(){this._canvas&&(this._canvas.width=window.innerWidth,this._canvas.height=window.innerHeight,t.viewport(0,0,this._canvas.width,this._canvas.height))}loop(){t.clear(t.COLOR_BUFFER_BIT);const e=this._shader?.getUniformLocation("u_color");t.uniform4f(e,1,.5,0,1),this._buffer?.bind(),this._buffer?.draw(),requestAnimationFrame(this.loop.bind(this))}createBuffer(){this._buffer=new i(3);const t=new e;t.location=this._shader?.getAttributeLocation("a_position"),t.offset=0,t.size=3,this._buffer.addAttributeLocation(t);this._buffer.pushBackData([0,0,0,0,.5,0,.5,.5,0]),this._buffer.upload(),this._buffer.unbind()}loadShaders(){this._shader=new r("basic","\n        attribute vec3 a_position;\n\n        void main() {\n            gl_Position = vec4(a_position, 1.0);\n        }","\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        ")}};window.onload=function(){a.start()},window.onresize=function(){a.resize()}}();
//# sourceMappingURL=index.HASH_REF_9ba7065a1dfaa656834cab6d60c2d3c1.js.map
