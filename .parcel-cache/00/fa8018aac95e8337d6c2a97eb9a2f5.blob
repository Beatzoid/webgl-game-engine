var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Engine", ()=>Engine
);
var _gl = require("./gl/gl");
var _glBuffer = require("./gl/glBuffer");
var _shader = require("./gl/shader");
class Engine {
    /**
     * Creates a new Engine
     */ constructor(){
    }
    /**
     * Start up the Engine
     */ start() {
        this._canvas = _gl.GLUtilities.initialize();
        _gl.gl.clearColor(0, 0, 0, 1);
        this.loadShaders();
        this._shader?.use();
        this.createBuffer();
        this.resize();
        this.loop();
    }
    /**
     * Resizes the canvas to fit the window
     */ resize() {
        if (this._canvas) {
            this._canvas.width = window.innerWidth;
            this._canvas.height = window.innerHeight;
            _gl.gl.viewport(0, 0, this._canvas.width, this._canvas.height);
        }
    }
    loop() {
        _gl.gl.clear(_gl.gl.COLOR_BUFFER_BIT);
        // Set uniforms
        const colorPosition = this._shader?.getUniformLocation("u_color");
        _gl.gl.uniform4f(colorPosition, 1, 0.5, 0, 1);
        this._buffer?.bind();
        this._buffer?.draw();
        requestAnimationFrame(this.loop.bind(this));
    }
    createBuffer() {
        this._buffer = new _glBuffer.GlBuffer(3);
        const positionAttribute = new _glBuffer.AttributeInfo();
        positionAttribute.location = this._shader?.getAttributeLocation("a_position");
        positionAttribute.offset = 0;
        positionAttribute.size = 3;
        this._buffer.addAttributeLocation(positionAttribute);
        // prettier-ignore
        const vertices = [
            //  x  y  z
            0,
            0,
            0,
            0,
            0.5,
            0,
            0.5,
            0.5,
            0
        ];
        this._buffer.pushBackData(vertices);
        this._buffer.upload();
        this._buffer.unbind();
    }
    loadShaders() {
        const vertexShaderSource = `\n        attribute vec3 a_position;\n\n        void main() {\n            gl_Position = vec4(a_position, 1.0);\n        }`;
        const fragmentShaderSource = `\n        precision mediump float;\n\n        uniform vec4 u_color;\n\n        void main() {\n            gl_FragColor = u_color;\n        }\n        `;
        this._shader = new _shader.Shader("basic", vertexShaderSource, fragmentShaderSource);
    }
}
